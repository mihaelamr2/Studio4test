Library\\Containers\\JSON.description=Overview\n\n   This folder contains operations for manipulating Javascript objects, or more\n   precisely, string values that are contain objects in the JSON format\n   (JavaScript Object Notation).  JSON is a simple format that can represent\n   simple values, arrays, and objects in a human-readable format that is very\n   similar to what is used elsewhere in Operations Orchestration, with the added\n   benefit that Javascript scriptlets can handle them as true structured\n   objects.\n\nExamples\n\n   Arrays\n\n      To help illustrate the format, the following is a simple array of strings\n      in JSON format\:\n         [ "cat", "dog", "horse" ]\n\n      Note that this differs from the equivalent OO list\: \n         cat,dog,horse\n\n      The differences between JSON arrays and OO lists are that JSON arrays\n      - Are always surrounded by [ and ]\n      - Always use commas as delimeters (and therefore the delimiter is not\n        user-specified)\n      - Surrounds each string element with ""\n      - May contain delimiters inside of the string without confusion\n      - May contain linefeeds, tabs and other whitespace between items that\n        will be ignored\n\n      So the array \n         [ "Palo Alto, CA", "New York, NY" ]\n      will be correctly understood as having two items, whereas the OO list \n         Palo Alto,CA,New York,NY   \n      (using a comma delimeter) would be incorrectly interpreted as having four\n      elements.\n\n   Objects\n\n      In addition to arrays, JSON format provides an object, which is basically\n      an unordered set of name/value pairs. For example, the object \n         { "city" \: "Palo Alto", \n           "state" \: "CA" }\n      contains two elements, one with the name "city" having the value "Palo\n      Alto", and the other being the name "state" with the value "CA".\n\n   Nesting\n\n      Arrays and Objects may also be nested within other arrays and objects.\n      For example\:\n         { "name" \: "Hewlett Packard Enterprise", \n           "address" \: { \n               "streetAddress" \: "3000 Hanover St", \n               "city"          \: "Palo Alto", \n               "state" \: "CA" \n            }\n         }\n      is an object containing two elements, "name" and "address", with the \n      "address" element itself containing an object with 3 elements.  In the\n      same way, arrays can be nested inside of objects\:\n         { "name" \: "Hewlett Packard Enterprise", \n           "products" \: [ "HP-UX", "Operations Orchestration" ] \n         }\n\n      A practical usage of nesting is in operations that return lists of\n      objects, such as those that query a system for objects, such as those that\n      retrieve incidents from an incident management system.  Existing\n      integrations have handled this situation by either returning just a list\n      of ids and require the use of a separate operation to retrieve all of the\n      information for that object, or they return parallel lists of values (list\n      of id, list of name, etc.).  Using JSON objects provides a nice way to\n      return all of the data at once in a meaningful way.  For example, the\n      following array of objects might be returned from an operation\: \n      [ \n         { "id"       \: "1100",\n           "name"     \: "System out of memory",\n           "severity" \: "Critical" },\n\n         { "id"       \: "1101",\n           "name"     \: "Disk usage at 85%",\n           "severity" \: "Warning" }\n      ]\n\nAdditional information\n\n   See http\://www.json.org for a complete explanation of the JSON format.\n
