Library\\JDBC.description=The operations in this folder can be used to interact with many databases.\n\nVersions Supported\:\nNot Applicable\n\nDeployment Requirements\:\nRAS\n\nInterfaces/APIs Used\:\nJava ODBC (java.sql),JTDS \n\n\nNotes\: \n1. For Windows authentication, TCP/IP protocol must be enabled; also, the username should be in the form of domain\\username; if no domain is present in the username, the default value "CORP" will be used. \n\n2. By default, we only include the drivers for Oracle, MSSQL and Sybase. To enable other database type support like MySQL, DB2 or Netcool, you have two options\:\nCopy the JDBC connector e.g. mysql-connector-java-5.1.29-bin.jar into the installation folder of studio <STUDIO_HOME>. \n            2.1. For versions up to OO 10.01\:\n\tIn studio \: the JDBC driver would need to be copied to <STUDIO_HOME>/debugger/lib\n\tIn central\: add a line to file <CENTRAL_HOME>/conf/central-wrapper.conf like this\: "wrapper.java.classpath.4\=c\:\\mysql-connector-java-5.1.29-bin.jar" and then restart OO central service.\n            2.2. For versions greater and including OO 10.02\:\n\tIn studio\: Create a folder in <STUDIO_HOME>\\lib\\ and name it ext. Create a folder in <STUDIO_HOME>\\lib\\ext\\ and name it <Group Id>_<Artifact Id>_<Version>. Example\: <STUDIO_HOME>\\lib\\ext\\com.hp.oo_oo-sql-legacy-plugin_1.0.136 (where 1.0.136 is your actual content pack plugin version). Then copy the mysql connector in that folder.\n\tFor central\: <OO_HOME>\\central\\tomcat\\temp\\ext\\<Group Id>_<Artifact Id>_<Version>. Example\: <OO_HOME>\\central\\tomcat\\temp\\ext\\com.hp.oo_oo-sql-legacy-plugin_1.0.136 (where 1.0.136 is your actual content pack plugin version). Then copy the mysql connector in that folder.\n\tFor RAS\: <OO_HOME>\\ras\\lib\\ext\\<Group Id>_<Artifact Id>_<Version>. Example\: <OO_HOME>\\ras\\lib\\ext\\com.hp.oo_oo-sql-legacy-plugin_1.0.136 (where 1.0.136 is your actual content pack plugin version). Then copy the mysql connector in that folder.\n            2.3 For versions greater and including OO 10.20 you can create the folder without the version i.e. <Group Id>_<Artifact Id> so you will not need to modify the folder name every CP upgrade. Example\: <STUDIO_HOME>\\lib\\ext\\com.hp.oo_oo-sql-legacy-plugin. Using <Group Id>_<Artifact Id>_<Version> is also supported but you need to provide the version of your actual content pack plugin version. If you are adding new custom content please take into consideration that this is under the assumption that every plugin exist only in one CP and exist only with one version.\n\nIn the example above where we have the plugin com.hp.oo_oo-sql-legacy-plugin_1.0.136  the group_id is com.hp.oo, the artifact_id is oo-sql-legacy-plugin and the version is 1.0.136.\nAlso the content pack plugin version will be the base content pack version deployed. Can be taken from any SQL operation in the JDBC folder. Also you can find there the group id and the artifact id. As stated in 2.3 in latest releases of OO, the version is not needed anymore.\n    \n3. Note that in order for the connector to support IPv6 connections you should donwload the latest version of MySQL Connector/J.\n4. If the database type is not in the SQL Database Type selection list, update the selection list to include, for example MySQL. For the database type other than MySQL or Netcool, please refer to the Custom Note for details. \n\n5. The instance input is for MSSQL database only. In order to access the instance, specify a value for the "instance" input but not for the "port" input. \n\n\n6. A ResultSet object maintains a cursor pointing to its current row of data. A default ResultSet object is not updatable and has a cursor that moves forward only.\nOther possible result sets types and concurrency are\:\n    TYPE_FORWARD_ONLY - indicating the type for a ResultSet object whose cursor may move only forward. For DB2 the resultSetType is overriden to this type.\n    TYPE_SCROLL_INSENSITIVE - indicating the type for a ResultSet object that is scrollable but generally not sensitive to changes to the data that underlies the ResultSet.\n    TYPE_SCROLL_SENSITIVE - indicating the type for a ResultSet object that is scrollable and generally sensitive to changes to the data that underlies the ResultSet.\n    CONCUR_READ_ONLY - indicating the concurrency mode for a ResultSet object that may NOT be updated.\n    CONCUR_UPDATABLE - indicating the concurrency mode for a ResultSet object that may be updated.\n\nCustom Note\:\nTo use a Custom database type, use the Custom option from the SQL Database Type selection list, add the classname of the JDBC driver to use in the dbClass input and add the url required to load up the driver and make your connection in the dbURL input. \n\nExample 1\: How to connect to MSSQL database using Custom as input from DbType - Choose DbType input (from Selection List) to be Custom, set dbClass input to net.sourceforge.jtds.jdbc.Driver and set dbURL input to (e.g.) jdbc\:jtds\:sqlserver\://<your database server IP>\:1433/<your database name>;instanceName\=mssql. Allow reasonable timeout to execute the command (set timeout input to 10).\n\nExample 2\: How to connect to MySQL database - Set DbType input to MySQL and DBPort input to 3306.\n\nExample 3\: How to connect to Firebird database - Make sure you have the Jaybird driver loaded as explained above. Set DbType input to Custom, set Database input to the full database path, set dbClass input to org.firebirdsql.jdbc.FBDriver and set dbURL input to jdbc\:firebirdsql\://<your database server IP>\:<your database port>/<full path to database>?charSet\=utf-8.\n\nDB2 Note\: \nThe DB2 commands should not be followed by ';'. Every time a table name is needed, it will be used in commands preceded by the name of the schema. So, every time a table is to be used, TABLE_NAME should be replaced by SCHEMA_NAME.TABLE_NAME.\n\nOracle Note\:\nIt is possible to run PL/SQL procedures using the operations. The examples below present the syntax to be used for having the same efect as the following PL/SQL script\: \nBEGIN\nsend_message(addressee\=>'b@hp.com',sender\=>'pas@hp.com',subject\=>'Test',message\=>'Test');\nEND;\n\nExample 1\: BEGIN send_message(addressee\=>'b@hp.com',sender\=>'pas@hp.com',subject\=>'Test',message\=>'Test');END;\n\nExample 2\: BEGIN send_message('b@hp.com','pas@hp.com','Test','Test');END;\n\nExample 3\: {CALL send_message(addressee\=>'b@hp.com',sender\=>'pas@hp.com',subject\=>'Test',message\=>'Test')}\n\nExample 4\: {CALL send_message('b@hp.com','pas@hp.com','Test','Test')}\n\nDatabase Pooling Note\:\nBelow is a "databasePoolingProperties" input example. It is a list of name-value properties separated by newline.\nTo use this for all flows that need db pooling you may set a system propety with the name\: databasePoolingProperties and the value, the content below. Otherwise, for migrated 9x flows/subflows you need to add "databasePoolingProperties" as an input at flow level.\n\n\# Enable connection pooling, if this set to false, rest of the\n\# Java connection pooling configuration will be ignored.\n\#\ndb.pooling.enable\=true\n\#\n\# Interval in seconds for a low priority thread to\n\# clean the pooled DataSource that has 0 connections.\n\# default is 2 hours.\n\#\ndb.datasource.clean.interval\=7200\n\# --------------------------------------------------------------\n\# General configuration per DBMS\n\# --------------------------------------------------------------\n\# Notes\: The following <dbtype>.connection.total.maxpoolsize should\n\# be tied with the property connection.maxpoolsize which is per user.\n\#\n\# For example, if set connection.maxpoolsize \= 20 and\n\# oracle.connection.total.maxpoolsize\=100,  then,\n\# a maximum of 5 users can connect to the database at the same time\n\# or maximum of 5 pooled DataSources can be opened at the same time.\n\# Number of pooled DataSources (users) \=\n\# <dbtype>.connection.total.maxpoolsize / connection.maxpoolsize. \n\#\n\# Adjust these properties carefully.\n\#\n\# Total connections per DBMS for Oracle Server.\n\#\noracle.connection.total.maxpoolsize\=100\n\#\n\# Total connections per DBMS for SQL Server.\n\#\nmssql.connection.total.maxpoolsize\=100\n\#\n\# Total connections per DBMS for MySql.\n\#\nmysql.connection.total.maxpoolsize\=100\n\#\n\# Total connections per DBMS for DB2.\n\#\ndb2.connection.total.maxpoolsize\=100\n\#\n\# Total connections per DBMS for Sybase.\n\#\nsybase.connection.total.maxpoolsize\=100\n\#\n\# Total connections per DBMS for Netcool.\n\#\nnetcool.connection.total.maxpoolsize\=100\n\#\n\# Total connections per DBMS for any other database type that\n\# is not supported by HPE Operations Orchestration\n\#6\ncustom.connection.total.maxpoolsize\=100\n\#\n\# Lifetime in seconds for a connection in the pool before\n\# it gets discarded for Oracle.\n\#\noracle.connection.lifetime\=3600\n\#\n\# Lifetime in seconds for a connection in the pool before\n\# it gets discarded for SQL Server.\n\#\nmssql.connection.lifetime\=3600\n\#\n\# Lifetime in seconds for a connection in the pool before\n\# it gets discarded for MySql.\n\#\nmysql.connection.lifetime\=3600\n\#\n\# Lifetime in seconds for a connection in the pool before\n\# it gets discarded for DB2.\n\#\ndb2.connection.lifetime\=3600\n\#\n\# Lifetime in seconds for a connection in the pool before\n\# it gets discarded for Sybase.\n\#\nsybase.connection.lifetime\=3600\n\#\n\# Lifetime in seconds for a connection to stay in the pool before\n\# it gets discarded for netcool\n\#\nnetcool.connection.lifetime\=3600\n\#\n\# Lifetime in seconds for a connection in the pool before\n\# it gets discarded for any other db type that\n\# is not supported by HPE Operations Orchestration.\n\#\ncustom.connection.lifetime\=3600\n\# --------------------------------------------------------------\n\# General configuration per user for DataSource provided\n\# by a pooled DataSource provider\n\# --------------------------------------------------------------\n\#\n\# Maximum number of connections a pooled DataSource will maintain at a time.\n\#\nconnection.maxpoolsize\=20\n\#\n\# Minimum number of connections a pooled DataSource will maintain at a time.\n\#\nconnection.minpoolsize\=0\n\#\n\# Init number of connections when a pooled DataSource starts.\n\#\nconnection.initpoolsize\=1\n\#\n\# Seconds a Connection can remain pooled but unused before being discarded.\n\#\nconnection.maxidletime\=300\n\#\n\# The number of milliseconds a client checkout connection will wait for a\n\# Connection to be checked in or acquired when the pool is exhausted.7\n\#\nconnection.checkout.timeout\=20000\n\#\n\# How many connections at a time connection will try to acquire when\n\# the pool is exhausted.\n\#\nconnection.acquireincrementsize\=1\n\#\n\# How many times connection pool will try to acquire a new Connection from the\n\# database before giving up. If this value is less than or equal to zero,\n\# it keep trying to fetch a connection indefinitely.\n\#\nconnection.retrycount\=1\n\#\n\# The number of seconds connection pool will wait between acquisition attempts.\n\#\nconnection.retrydelay\=5\n\#\n\# If true, an operation will be performed asynchronously at every\n\# connection checkout to verify that the connection is valid.\n\#\nconnection.validate_oncheckout\=true\n\#\n\# If true, an operation will be performed asynchronously at every connection\n\# checkin to verify that the connection is valid.\n\#\nconnection.validate_oncheckin\=false\n\#\n\# If this is a number greater than 0, it will test all idle,\n\# pooled but unchecked-out connections, at an interval of the number of\n\# seconds specified.\n\#\nconnection.idle_validateperiod\=0\n\#\n\# If true, a pooled DataSource will declare itself broken and be permanently\n\# closed if a Connection cannot be obtained from the database after making\n\# acquireRetryAttempts. If false, failure to obtain a connection\n\# will cause all threads waiting for the pool to acquire a connection to throw\n\# an exception, but the DataSource will remain valid, and will attempt to\n\# acquire again following a call to getConnection().\n\#\nconnection.break_afteracquirefailure\=true\n\# \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\n\# For the flows under Library/Operatons/Databases/Microsoft SQL\n\# The following configuration is for .NET connection pooling.\n\# \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\n\#\n\# Maximum number of connections for SQL Server.\n\#\nsqlserver.connection.maxpoolsize\=100\n\#\n\# Connection lifetime in seconds for SQL Server.\n\#\nsqlserver.connection.lifetime\=3600\n
