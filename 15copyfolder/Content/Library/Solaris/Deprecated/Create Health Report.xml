<?xml version="1.0" encoding="UTF-8"?>
<operation id="419031cf-bd20-403e-b38c-9d52ff0631d8">
  <descriptionCdata><![CDATA[419031cf-bd20-403e-b38c-9d52ff0631d8.description=\n      This operation is used by the Solaris health check flow to generate a human-readable message summarizing a computers condition. It is very specialized, and should not be used elsewhere.\n\nResponses\:\nsuccess - This is always  the response.\n      
]]></descriptionCdata>
  <annotation>419031cf-bd20-403e-b38c-9d52ff0631d8.description</annotation>
  <name>Create Health Report</name>
  <categories/>
  <inputs>
    <staticBinding id="ca148b10-48e7-4bcd-ae8a-9b1e4ccb63c0">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_1</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in1}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="b50d8596-1f4c-4e32-ad8a-c3126a86af36">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_2</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in2}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="f902719a-e71b-4659-a10f-d936b4977557">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_3</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in3}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="fb5c4547-dd90-4fee-a9b2-e241df571802">
      <annotation></annotation>
      <toContextKey></toContextKey>
      <fromContextKey></fromContextKey>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey></recordKey>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_4</inputSymbol>
      <listDelimiter></listDelimiter>
      <value>${in4}</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="6ed37197-7091-4916-99d4-5f5f2e740e11">
    <annotation></annotation>
    <name>Operation Create Health Report (df2142dd-4d35-4760-8467-e2d9a0769679)</name>
    <script>// get all the data that we acquired
hostname = scriptletContext.get(&quot;ic_hostname&quot;);

warning = &quot;&quot;;
header = &quot;Server Health Report for server &quot; + hostname + &quot;:\n\n&quot;;
report = &quot;\nSystem Check Information:\n&quot;;

// run through all the data we gathered and add it to the report
checkPing();
checkUptime();
showOSInfo();
showLogInfo();
showProcInfo();
showMemInfo();
checkProcessList();
showFSData();
showIOStatInfo();
showNICInfo();

// did we have any warnings?
warnstring = &quot;&quot;;
if (warning != &quot;&quot;) warnstring = &quot;Warning conditions:\n&quot;;

// format the final output information
scriptletResult = header + warnstring + warning + report;

// functions for checking all data

// -----------------------------------------------------------------------------------
//  checkPing ()   - check the data returned from Ping
// -----------------------------------------------------------------------------------
function checkPing() {

   pingOutput = scriptletContext.get(&quot;output&quot;);

   if (pingOutput != null) {
      // get the max latency
      pingLatency = -1;
      max = pingOutput.match(/Maximum = \d*/);
      if (max[0] != null)   {
         pingLatency = max[0].match(/\d+/);
      }
      if (pingLatency == -1) {
         report += &quot;Unable to obtain ping data\n&quot;;
         warning += &quot;Unable to obtain ping data\n&quot;;
      } 
      else {
         report += &quot;Maximum latency pinging &quot; + hostname + &quot; was &quot; + pingLatency + &quot; ms\n&quot;;
         if (pingLatency &gt; 200) warning += &quot;Ping took longer than 200ms\n&quot;;
      }

      // check the packet loss
      loss = pingOutput.match(/(\d*)(% loss)/);
      if (loss != null) {
         pct = parseInt(loss[1]);
         report += &quot;Packet loss was &quot; + pct + &quot; %\n&quot;;
         if (pct != 0) { 
            warning += &quot;Ping had &quot; + pct + &quot;% packet loss\n&quot;;
         }
      }
      else {
         report += &quot;Unable to determine packet loss\n&quot;;
         warning += &quot;Unable to determine packet loss\n&quot;;     
      }
   }
   else {
      report += &quot;Unable to ping server\n&quot;;
      warning += &quot;Unable to ping server\n&quot;;
   }
}

// -----------------------------------------------------------------------------------
//  checkUptime ()   - check the data returned from uptime
// -----------------------------------------------------------------------------------

function checkUptime() {

   uptime = scriptletContext.get(&quot;ic_uptime&quot;);

   // add uptime info
   if (uptime != null &amp;&amp; uptime &gt; 0) {
      mins = parseInt(uptime);
      hrs = mins /60;
      days = hrs / 24;
      hours = hrs % 24;
      minutes = mins % 60;
      report += &quot;System has been up for &quot;;
      if (days &gt; 0) report += java.lang.Math.floor(days).toString() + &quot; day&quot;;
      if (days &gt; 1) report += &quot;s&quot;;
      if (hours &gt; 0) report += &quot;, &quot; + java.lang.Math.floor(hours).toString() + &quot; hour&quot;;
      if (hours &gt; 1) report += &quot;s&quot;;
      report += &quot; &quot; + minutes.toString() + &quot; minute&quot;;
      if (minutes != 1) report += &quot;s&quot;;
      report += &quot;\n&quot;;
      if (mins &lt;= 15) warning += &quot;System was rebooted in the last 15 minutes\n&quot;;
   }
   else {
      report += &quot;Unable to obtain uptime\n&quot;
      warning += &quot;Unable to obtain uptime\n&quot;
   }
}

// -----------------------------------------------------------------------------------
//  showOSInfo ()   - process the data about the OS and patch levels
// -----------------------------------------------------------------------------------

function showOSInfo() {

   OS = scriptletContext.get(&quot;ic_OS&quot;);
   patchList = scriptletContext.get(&quot;ic_patchlist&quot;);
   report += &quot;\nOperating System information:\n&quot;;

   // add the OS info
   if (OS != null) {
      report += &quot;Operating System is &quot; + OS + &quot;\n&quot;;
   }
   else {
      report += &quot;Unable to obtain OS\n&quot;;
      warning += &quot;Unable to obtain OS\n&quot;;
   }

   // add patch information
   if (patchList != null) {
      report += &quot;\nInstalled Patches:\n&quot; + patchList + &quot;\n&quot;;
   } 
   else {
      report += &quot;Unable to obtain patch list\n&quot;;
      warning += &quot;Unable to obtain patch list\n&quot;;
   }
}

// -----------------------------------------------------------------------------------
//  showLogInfo ()   - show recent log data if there is any
// -----------------------------------------------------------------------------------


function showLogInfo() {

   logMinutes = scriptletContext.get(&quot;ic_logminutes&quot;);

   // any recent log messages?
   if (logMinutes != null) {
      duration = parseInt(logMinutes);
      if (duration &lt;= 15) {
         report += &quot;New log messages in the last 15 minutes. Most recent:\n&quot;;
         warning += &quot;New log messages in the last 15 minutes\n&quot;;

         // get the log messages
         messages = scriptletContext.get(&quot;ic_logMessages&quot;) + &quot;\n&quot;;
         report += messages;
      }
      else {
         report += &quot;No new log messages in the last 15 minutes\n&quot;;
      }
   }
}

// -----------------------------------------------------------------------------------
//  showProcInfo ()   - show key processor information
// -----------------------------------------------------------------------------------

function showProcInfo() {

   procCount = scriptletContext.get(&quot;ic_numProcs&quot;);
   procStatus = scriptletContext.get(&quot;ic_online&quot;);
   loadOneMinute = scriptletContext.get(&quot;ic_oneMinute&quot;);
   loadFiveMinute = scriptletContext.get(&quot;ic_fiveMinute&quot;);
   loadFifteenMinute = scriptletContext.get(&quot;ic_fifteenMinute&quot;);
   blockedThreads = scriptletContext.get(&quot;ic_blockedThreads&quot;);

   // Add a heading
   report += &quot;\nProcessor Information:\n&quot;;

   // add processor information
   if (procCount != null) {
      num = parseInt(procCount);
      if (num != 1) {
         report += &quot;System has &quot; + procCount + &quot; processors\n&quot;;
      }
      else {
         report += &quot;System has 1 processor\n&quot;;
      }
   }
   else {
      report += &quot;Unable to get processor count\n&quot;;
      warning += &quot;Unable to get processor count\n&quot;;
   }

   if (procStatus != null) {
      report += procStatus + &quot;\n&quot;;
   } 
   else {
      report += &quot;Unable to obtain processor status\n&quot;;
      warning += &quot;Unable to obtain processor status\n&quot;;
   }

   if (loadOneMinute != null) {
      report += &quot;Load Average is &quot; + loadOneMinute + &quot;  &quot; + loadFiveMinute + &quot;  &quot; +  loadFifteenMinute + &quot;\n&quot;;

      // is the load average near the number of procs?
      oneMin = parseInt(loadOneMinute);
      numProcs = parseInt(procCount);
      threshold = numProcs * .8;
      if (oneMin &gt; threshold) {
         // has it been high for a while?
         fiveMin = parseInt(fiveMinutes);
         if (fiveMin &gt; threshold) {
            report += &quot;System is heavily loaded\n&quot;;
            warning += &quot;System is heavily loaded\n&quot;;
         }
         else {
            report += &quot;System appears to have a CPU spike\n&quot;;
         }
      }
      else {
         // is the system underutilized?
         threshold = threshold = numProcs * .2;
         if (oneMin &lt;= threshold) {
            report += &quot;CPU usage is low: System may be under-utilized\n&quot;;
            warning += &quot;CPU usage is low: System may be under-utilized\n&quot;;
         } 
         else {
            report += &quot;System is operating at normal load\n&quot;;
         }
      }
   }

   // check blocked threads
   if (blockedThreads != null) {
      threads = parseInt(blockedThreads);
      if (threads == 0) {
         report += &quot;No blocked threads found\n&quot;;
      }
      else if (threads &lt; 10) {
         report += &quot;Some blocked threads detected\n&quot;;
         warning += &quot;Some blocked threads detected\n&quot;;
      } 
      else {
         report += &quot;Many blocked threads detected.  System may be CPU bound\n&quot;;
         warning += &quot;Many blocked threads detected.  System may be CPU bound\n&quot;;
      }
   }
}

// -----------------------------------------------------------------------------------
//  showMemInfo ()   - show key memory info
// -----------------------------------------------------------------------------------


function showMemInfo() {

   freeMemory = scriptletContext.get(&quot;ic_freeMemory&quot;);

   if (freeMemory != null) {
      report += &quot;System has &quot; + freeMemory + &quot; bytes of free memory\n&quot;;
      if (freeMemory &lt; 100000) warning += &quot;System has less than 100MB of free memory\n&quot;;
   }
   else {
      report += &quot;Unable to obtain memory statistics\n&quot;;
      warning += &quot;Unable to obtain memory statistics\n&quot;;
   }

   // get the vmstat info
   vmstat = &quot;&quot;;
   vminfo = scriptletContext.get(&quot;ic_vmstat&quot;);
   if (vminfo != null) {
      // move to a string so we can parse
      vmstat += vminfo;
      lines = vmstat.split(/\n/);
      line3val = parseInt((lines[3].split(/\s/))[12]);
      line4val = parseInt((lines[4].split(/\s/))[12]);
      line5val = parseInt((lines[5].split(/\s/))[12]);
      total = line3val + line4val + line5val;
      if (total &gt; 600 || line3val &gt; 200 || line4val &gt; 200 || line5val &gt; 200) {
         // we may have a problem, make sure it is consistent
         if (line3val &gt;= 125 &amp;&amp; line4val &gt;= 125 &amp;&amp; line5val &gt;= 125) {
            report += &quot;Significant memory swapping occuring.  System may need more RAM\n&quot;;
            warning += &quot;Significant memory swapping occuring.  System may need more RAM\n&quot;;
         }
         else {
            report += &quot;Some memory swapping occuring.\n&quot;;
            warning += &quot;Some memory swapping occuring.\n&quot;;
        }
      }
      else {
         report += &quot;Little or no swapping occuring\n\n&quot;;
      }
   }
   else {
      report += &quot;Unable to obtain vmstat info\n&quot;;
      warning += &quot;Unable to obtain vmstat info\n&quot;;
   }
}

// -----------------------------------------------------------------------------------
//  checkProcessList ()   - verify key processes are running
// -----------------------------------------------------------------------------------


function checkProcessList() {

   //verify that key processes are running
   necessary = processList = &quot;&quot;;
   procList = scriptletContext.get(&quot;ic_processList&quot;);
   if (procList != null) {
      processList += procList;
      necessary += scriptletContext.get(&quot;ic_vital&quot;);
      output = &quot;&quot;;

      // assume list is delimited by comma, pipe, space or newline
      processes = necessary.split(/[,\\\|\n]/);
      proc_output = &quot;&quot;;
      for (i = 0; i &lt; 10000; i++) {
         if (processes[i] == null) break;
         if (processList.match(processes[i]) == null) {
            proc_output += processes[i] + &quot; is not running\n&quot;;
         }
       }

      // are any processes missing?
      if (proc_output == &quot;&quot;) {
         report += &quot;All vital processes are running\n\n&quot;;
      } 
      else {
         report += proc_output;
         warning += proc_output;
      }
   }
   else {
      report += &quot;Unable to obtain process list\n&quot;;
      warning += &quot;Unable to obtain process list\n&quot;;
   }
}

// -----------------------------------------------------------------------------------
//  showFSData ()   - show File System data
// -----------------------------------------------------------------------------------

function showFSData() {

   fileList = scriptletContext.get(&quot;ic_filesystem&quot;);

   if (fileList != null) {
      // data is formatted in two columns: % mountname
      // the first row is a header
      // to split data from context it must be turned back into a native Javascript string
      // to do this we initialize a blank string and then append the variable
      fileData = &quot;&quot;;
      fileData += fileList;
      lines = fileData.split(/\s+/);

      for (i = 2; i &lt; 1000; i += 2) {
         if (lines[i] != null &amp;&amp; lines[i + 1] != null)   {
            diskreport = &quot;File System &quot; + lines[i + 1] + &quot; is at &quot; + lines[i] + &quot; capacity\n&quot;;
            if (parseInt(lines[i]) &gt;= 90) {
               report += &quot;WARNING: &quot;;
               warning += diskreport;
            }
            report += diskreport;
         }
         else {
            break;
         }
      }
   }
   else {
      report += &quot;Unable to obtain file system list information\n&quot;;
      warning += &quot;Unable to obtain file system list information\n&quot;;
   }
}
// -----------------------------------------------------------------------------------
//  showIOStatInfo ()   - show key disk info from iostat
// -----------------------------------------------------------------------------------

function showIOStatInfo() {

   iostat = scriptletContext.get(&quot;ic_iostat&quot;);

   // deal with the iostat information
   // this assume we are getting extended IO stat information and looks for anomolies
   // there should be two readings, the first is the average since boot,
   // the second one is the current 

   output = &quot;\nDevice IO checks:\n&quot;;
   if (iostat != null) {

      // first, split it all into lines
      data = &quot;&quot;;
      data += iostat;
      lines = data.split(/\n/);

      // we know the first two lines are header, go find the header for the second set
      for (i = 2; i &lt; 1000; i++) {
         second_set = 0;
         if (lines[i].match(/extended device/) != null) {
            second_set = i + 2;
            break;
         }
      }

      // how many lines are there?
      line_count = i - 2;
      if (line_count &gt; 0) {
         for (i = 0; i &lt; line_count; i++) {
            // split the average line and current line into columns
            average = lines[i + 2].split(/\s+/);
            current = lines[line_count + i + 4].split(/\s+/);
            this_output = &quot;&quot;;

            // compare key stats of each lines average versus now
            creads = parseInt(current[1]);
            areads = parseInt(average[1]);
            cwrites = parseInt(current[2]);
            awrites = parseInt(average[2]);
            cwsvc = parseInt(current[7]);
            casvc = parseInt(current[8]);
            cwait = parseInt(current[9]);
            await = parseInt(average[9]);
            cbusy = parseInt(current[10]);
            cerrors = parseInt(current[14]);
            name = current[15];

            // look for some anomolies
            if (cwait &gt; (await * 1.25)) this_output += &quot;Current disk wait on &quot; + name + &quot; is more than 25% above average\n&quot;;
            if (cwait &gt; 5 &amp;&amp; cbusy &gt;= 10) this_output += &quot;Disk wait on &quot; + name + &quot; is above 5%\n&quot;;
            if (cwsvc + casvc &gt; 30 &amp;&amp; cbusy &gt; 5) this_output += &quot;Current disk wait time exceeds 30 ms on &quot; + name + &quot;\n&quot;;
            if (cbusy &gt;= 60) this_output += name + &quot; is over 60% busy\n&quot;;
            if (creads &gt; (areads * 3)) this_output += &quot;Current reads on &quot; + name + &quot; are more than 300% of average\n&quot;;
            if (cwrites &gt; (awrites * 3)) this_output += &quot;Current writes on &quot; + name + &quot; are more than 300% of average\n&quot;;
            if (cerrors &gt; 3) this_output += &quot;More than 3 errors encountered on&quot; + name + &quot;\n&quot;;
      
            // check to see if we found anything
            if (this_output == &quot;&quot;) {
               this_output = name + &quot; looks normal\n&quot;;
            }
            else {
               warning += this_output;
            }
            output += this_output;
         }
      }  // end for
   
      // add in the current raw data
      output += &quot;\nDetailed iostat information:\n&quot;;
      for (i = line_count + 2; i &lt; 10000; i++) {
         if (lines[i] == null) break;
         output += lines[i] + &quot;\n&quot;;
      }  // end for 
      report += output;
   } // end if (iostat != null)
   else
   {
      report += &quot;Unable to obtain iostat information\n&quot;;
      warning += &quot;Unable to obtain iostat information\n&quot;;
   }
}

function showNICInfo()
{
   data = &quot;&quot;;
   nicinfo = scriptletContext.get(&quot;ic_nicinfo&quot;);
   if (nicinfo != null) {
      data += nicinfo;
      report += nicinfo;

      // check each line and see if we need to add a warning
      lines = data.split(/\n/);
      for (i = 0; i &lt; 100; i++) {
         if (lines[i] == null) break;
         if (lines[i] == &quot;&quot;) continue;
         if (lines[i].match(&quot;No errors&quot;) != null) continue;
         warning += lines[i] + &quot;\n&quot;;
      }  // end for
   }  // end if (nicinfo != null)
   else {
      report += &quot;Unable to get NIC card info\n&quot;;
      warning += &quot;Unable to get NIC card info\n&quot;;
   }
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="6ba3a8d1-d168-4b6b-96b1-453fc5606b10">
      <annotation></annotation>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="2fd86a46-1bb9-4560-ab5d-97608e532f38">
    <annotation></annotation>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="d0b05bcd-22dc-4fe6-80c8-e4f0ae157808">
    <baseIcon>document.png</baseIcon>
    <basePath>Others/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="c61823f4-a67a-40b1-a5c6-6bf0de9a37c2">
        <baseIcon>edit.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>